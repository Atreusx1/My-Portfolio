/* src/components/Loading.module.css */

/* --- Base Styles (Desktop First) --- */

.loadingScreenSplit {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  display: flex; /* Default: Desktop uses flex for split */
  overflow: hidden;
  background-color: transparent; /* Parent is see-through */
  z-index: 1; /* High z-index */ /* Adjusted from 1 */
  perspective: 1000px; /* For 3D transforms on desktop */
  transition: opacity 1.2s ease-out, visibility 1.2s step-end; /* Default visibility transition */
  opacity: 1; /* Start visible */
  visibility: visible; /* Start visible */
  will-change: transform, opacity, visibility; /* Optimize animation */
  pointer-events: auto; /* Default: allow interaction (needed for desktop halves) */
}

.loadingHalf {
  width: 50%; /* Default: Desktop halves */
  height: 100%;
  position: relative; /* For positioning canvas inside */
  background-size: cover; /* Changed from 200% 100% to cover */
  background-position: center center; /* Center the image */
  background-repeat: no-repeat;
  will-change: transform, opacity, background-image; /* Add background-image */
  pointer-events: auto; /* Halves are interactive conceptually */
  transform-style: preserve-3d;
  transform: translateX(0%) rotateY(0deg);
  /* Desktop animation transitions */
  transition: transform 1.2s cubic-bezier(0.7, 0, 0.3, 1),
              opacity 0.5s ease-out,
              background-image 0.5s ease-in; /* Add transition for bg image */
  /* Start with opacity for fade-in effect */
  opacity: 0;
}

/* Apply opacity 1 when images are loaded */
.loadingScreenSplit.imagesVisible .loadingHalf {
    opacity: 1;
}


.loadingLeft {
  /* --- DEFERRED: Use variable --- */
  background-image: var(--bg-day);
  /* --- ADDED: Fallback color --- */
  background-color: #cdeffb; /* Lighter sky blue */
  background-position: left center; /* Keep original position if needed */
  transform-origin: right center;
  position: relative;
  z-index: 1; /* Base layer */
}

.loadingRight {
  /* --- DEFERRED: Use variable --- */
  background-image: var(--bg-night);
   /* --- ADDED: Fallback color --- */
  background-color: #1a2a3a; /* Darker blue/grey */
  background-position: right center; /* Keep original position if needed */
  transform-origin: left center;
  position: relative;
  z-index: 1; /* Base layer */
}

.particleCanvas {
  position: absolute;
  top: 0;
  left: 0;
  width: 100% !important;
  height: 100% !important;
  display: block;
  z-index: 2; /* Above background image, below loader overlay */
  opacity: 1;
  will-change: opacity;
  transition: opacity 0.8s ease-out;
  background-color: transparent !important;
  pointer-events: none; /* Canvas itself shouldn't block */
}

.loaderOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 10; /* Above halves and particles */
  pointer-events: none; /* Click through overlay */
  opacity: 1;
  will-change: opacity;
  transition: opacity 0.4s ease-out; /* Faster fade for loader */
}

.loaderSpinnerContainer {
  width: 80px;
  height: 80px;
  margin-bottom: 25px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.loadingText {
  font-family: 'Yuji Mai', serif;
  font-size: 1.3rem;
  color: rgba(255, 255, 255, 0.95);
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.7);
  text-align: center;
  padding: 0 20px;
  opacity: 1;
  transition: opacity 0.4s ease-out; /* Match loader fade */
  will-change: opacity;
}

/* --- Desktop Curtain Animation Keyframes --- */

@keyframes slideRotateOutLeft {
  from { transform: translateX(0%) rotateY(0deg); opacity: 1; }
  /* Keep opacity change for fade-out */
  to { transform: translateX(-105%) rotateY(-20deg); opacity: 0; }
}

@keyframes slideRotateOutRight {
  from { transform: translateX(0%) rotateY(0deg); opacity: 1; }
   /* Keep opacity change for fade-out */
  to { transform: translateX(105%) rotateY(20deg); opacity: 0; }
}

/* --- Exiting State Base Styles --- */
.exiting {
   /* pointer-events: none; Applied below */
}

.exiting .loadingLeft {
  animation: slideRotateOutLeft 1.2s cubic-bezier(0.7, 0, 0.3, 1) forwards;
  pointer-events: none !important;
}

.exiting .loadingRight {
  animation: slideRotateOutRight 1.2s cubic-bezier(0.7, 0, 0.3, 1) forwards;
  pointer-events: none !important;
}

/* Base fade-out for particles and loader */
.exiting .particleCanvas {
  opacity: 0 !important;
  transition: opacity 0.8s 0.1s ease-out !important;
}

.exiting .loaderOverlay {
  opacity: 0 !important;
   transition: opacity 0.4s ease-out !important;
}
.exiting .loadingText {
    opacity: 0 !important;
    transition: opacity 0.4s ease-out !important;
}


/* --- Mobile Overrides (Targeting screens 768px and below) --- */
/* IMPORTANT: This media query must come AFTER the base styles */
@media (max-width: 768px) {

  /* 1. Style the main container */
  .loadingScreenSplit {
    display: block; /* Switch to block layout */
    position: fixed;
    /* --- DEFERRED: Use variable --- */
    background-image: var(--bg-mobile-main);
     /* --- ADDED: Fallback color --- */
    background-color: #cdeffb; /* Sky blue fallback */
    background-size: cover;
    background-position: center center;
    perspective: none;
    opacity: 1;
    visibility: visible;
    z-index: 9999;
    pointer-events: none !important;
    /* Setup transitions for fade out */
    transition: opacity 1.2s ease-out, visibility 1.2s ease-out, background-image 0.5s ease-in; /* Transition bg image too */
    will-change: opacity, visibility, background-image;
    /* Add initial opacity for fade-in on mobile */
    opacity: 0;
  }

  /* Apply opacity 1 when images are loaded */
 .loadingScreenSplit.imagesVisible {
     opacity: 1;
 }

  /* 2. Hide the right half */
  .loadingRight {
    display: none !important;
  }

  /* 3. Make left half full-screen, transparent overlay for particles */
  .loadingLeft {
    display: block !important;
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    background: none !important; /* Left half is transparent */
    transform: none !important;
    animation: none !important;
    opacity: 1 !important; /* This container itself is visible */
    pointer-events: none !important;
    z-index: 1; /* Above main container background */
  }

  /* 4. Position Particle Canvas within the full-screen .loadingLeft */
  .loadingLeft .particleCanvas {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    opacity: 1 !important;
    z-index: 1;
    pointer-events: none !important;
    transition: opacity 0.8s 0.1s ease-out !important;
  }
   /* Hide canvas from the non-displayed right side */
  .loadingRight .particleCanvas {
       display: none !important;
   }

  /* 5. Ensure Loader Overlay is correctly positioned and on top */
  .loaderOverlay {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    z-index: 10 !important; /* Above particles */
    opacity: 1 !important;
    pointer-events: none !important;
    transition: opacity 0.4s ease-out !important;
  }

  /* 6. Mobile Exit Behavior: Fade the main container AND hide visibility */
  .loadingScreenSplit.exiting {
    opacity: 0 !important;
    visibility: hidden !important;
    pointer-events: none !important;
    transition: opacity 1.2s ease-out, visibility 1.2s ease-out !important;
    animation: none !important;
  }

  /* Override desktop exit animations for halves (redundant but safe) */
  .exiting .loadingLeft,
  .exiting .loadingRight {
    animation: none !important;
    transform: none !important;
    opacity: 0 !important; /* Fade the container */
    pointer-events: none !important;
  }

   /* Ensure specific mobile fade transitions for children */
   .exiting .loadingLeft .particleCanvas {
     opacity: 0 !important;
     transition: opacity 0.8s 0.1s ease-out !important;
   }

   .exiting .loaderOverlay {
     opacity: 0 !important;
     transition: opacity 0.4s ease-out !important;
   }

   .exiting .loadingText {
       opacity: 0 !important;
       transition: opacity 0.4s ease-out !important;
   }
}